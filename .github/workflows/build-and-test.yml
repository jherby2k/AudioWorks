name: Build and test

on:
  push:
    branches: [ "main", "dev" ]
    paths-ignore:
      - .gitignore.txt
      - README.md
      - LICENSE
      - .github/dependabot.yml
  pull_request:
    branches: [ "main", "dev" ]


jobs:

  windows:
    name: Windows
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download external dependencies
      run: |
        $ProgressPreference = 'SilentlyContinue'
        Invoke-WebRequest -Uri https://audioworks.blob.core.windows.net/prerequisites/AppleApplicationSupport64.msi -OutFile AppleApplicationSupport64.msi

    - name: Install external dependencies
      run: |
        msiexec /i AppleApplicationSupport64.msi /qb-
      shell: cmd

    - name: Build
      run: dotnet build AudioWorks\AudioWorks.sln --configuration Release

    - name: Test AudioWorks.Common
      run: dotnet test AudioWorks\tests\AudioWorks.Common.Tests\AudioWorks.Common.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Test AudioWorks.Extensibility
      run: dotnet test AudioWorks\tests\AudioWorks.Extensibility.Tests\AudioWorks.Extensibility.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Test AudioWorks.Api
      run: dotnet test AudioWorks\tests\AudioWorks.Api.Tests\AudioWorks.Api.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Upload test output
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: Test output for Windows
        path: 'AudioWorks\tests\AudioWorks.Api.Tests\bin\Release\net8.0\Output\Encode\Valid\'

    - name: Test AudioWorks.Commands
      run: dotnet test AudioWorks\tests\AudioWorks.Commands.Tests\AudioWorks.Commands.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"
  
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Build artifacts
        path: 'AudioWorks\src\artifacts\package\release\'

    - name: Restore coverage history
      uses: dawidd6/action-download-artifact@v6
      with:
        name: Coverage History for Windows
        path: CoverageHistory
      continue-on-error: true

    - name: Generate code coverage reports
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.4
      with:
        reports: '${{ github.workspace }}\**\coverage.cobertura.xml'
        targetdir: 'CoverageReport'
        historydir: 'CoverageHistory'
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub;'
        assemblyfilters: '-*.Tests;-*.TestUtilities'
        filefilters: '-*.g.cs'
        tag: '${{ github.run_number }}_${{ github.run_id }}'

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: Coverage Report for Windows
        path: CoverageReport
  
    - name: Upload coverage history
      uses: actions/upload-artifact@v4
      with:
        name: Coverage History for Windows
        path: CoverageHistory

    - name: Add comment to PR
      if: github.event_name == 'pull_request'
      run: gh pr comment $PR_NUMBER --body-file CoverageReport\SummaryGithub.md
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.number }}

    - name: Publish coverage in build summary
      run: cat CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
      shell: bash


  ubuntu_2404:
    name: Ubuntu 24.04
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install library dependencies
      run: sudo apt-get install --yes libflac12t64 libmp3lame0 libopusenc0 libebur128-1 libvorbisenc2

    - name: Build
      run: dotnet build AudioWorks/AudioWorks.sln --configuration Release

    - name: Test AudioWorks.Common
      run: dotnet test AudioWorks/tests/AudioWorks.Common.Tests/AudioWorks.Common.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Test AudioWorks.Extensibility
      run: dotnet test AudioWorks/tests/AudioWorks.Extensibility.Tests/AudioWorks.Extensibility.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Test AudioWorks.Api
      run: dotnet test AudioWorks/tests/AudioWorks.Api.Tests/AudioWorks.Api.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Upload test output
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: Test output for Ubuntu 24.04
        path: 'AudioWorks/tests/AudioWorks.Api.Tests/bin/Release/net8.0/Output/Encode/Valid/'

    - name: Test AudioWorks.Commands
      run: dotnet test AudioWorks/tests/AudioWorks.Commands.Tests/AudioWorks.Commands.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Restore coverage history
      uses: dawidd6/action-download-artifact@v6
      with:
        name: Coverage History for Ubuntu 24.04
        path: CoverageHistory
      continue-on-error: true

    - name: Generate code coverage reports
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.4
      with:
        reports: '${{ github.workspace }}/**/coverage.cobertura.xml'
        targetdir: 'CoverageReport'
        historydir: 'CoverageHistory'
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub;'
        assemblyfilters: '-*.Tests;-*.TestUtilities'
        filefilters: '-*.g.cs'
        tag: '${{ github.run_number }}_${{ github.run_id }}'

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: Coverage Report for Ubuntu 24.04
        path: CoverageReport

    - name: Upload coverage history
      uses: actions/upload-artifact@v4
      with:
        name: Coverage History for Ubuntu 24.04
        path: CoverageHistory

    - name: Add comment to PR
      if: github.event_name == 'pull_request'
      run: gh pr comment $PR_NUMBER --body-file CoverageReport/SummaryGithub.md
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.number }}

    - name: Publish coverage in build summary
      run: cat CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY


  ubuntu_2204:
    name: Ubuntu 22.04
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install library dependencies
      run: sudo apt-get install --yes libflac8 libmp3lame0 libopus0 libebur128-1 libvorbisenc2

    - name: Build
      run: dotnet build AudioWorks/AudioWorks.sln --configuration Release

    - name: Test AudioWorks.Common
      run: dotnet test AudioWorks/tests/AudioWorks.Common.Tests/AudioWorks.Common.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Test AudioWorks.Extensibility
      run: dotnet test AudioWorks/tests/AudioWorks.Extensibility.Tests/AudioWorks.Extensibility.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Test AudioWorks.Api
      run: dotnet test AudioWorks/tests/AudioWorks.Api.Tests/AudioWorks.Api.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Upload test output
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: Test output for Ubuntu 22.04
        path: 'AudioWorks/tests/AudioWorks.Api.Tests/bin/Release/net8.0/Output/Encode/Valid/'

    - name: Test AudioWorks.Commands
      run: dotnet test AudioWorks/tests/AudioWorks.Commands.Tests/AudioWorks.Commands.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Restore coverage history
      uses: dawidd6/action-download-artifact@v6
      with:
        name: Coverage History for Ubuntu 22.04
        path: CoverageHistory
      continue-on-error: true

    - name: Generate code coverage reports
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.4
      with:
        reports: '${{ github.workspace }}/**/coverage.cobertura.xml'
        targetdir: 'CoverageReport'
        historydir: 'CoverageHistory'
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub;'
        assemblyfilters: '-*.Tests;-*.TestUtilities'
        filefilters: '-*.g.cs'
        tag: '${{ github.run_number }}_${{ github.run_id }}'

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: Coverage Report for Ubuntu 22.04
        path: CoverageReport
    
    - name: Upload coverage history
      uses: actions/upload-artifact@v4
      with:
        name: Coverage History for Ubuntu 22.04
        path: CoverageHistory

    - name: Add comment to PR
      if: github.event_name == 'pull_request'
      run: gh pr comment $PR_NUMBER --body-file CoverageReport/SummaryGithub.md
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.number }}

    - name: Publish coverage in build summary
      run: cat CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY


  mac_arm:
    name: Mac on ARM
    runs-on: macos-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Build
      run: dotnet build AudioWorks/AudioWorks.sln --configuration Release

    - name: Test AudioWorks.Common
      run: dotnet test AudioWorks/tests/AudioWorks.Common.Tests/AudioWorks.Common.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Test AudioWorks.Extensibility
      run: dotnet test AudioWorks/tests/AudioWorks.Extensibility.Tests/AudioWorks.Extensibility.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Test AudioWorks.Api
      run: dotnet test AudioWorks/tests/AudioWorks.Api.Tests/AudioWorks.Api.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Upload test output
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: Test output for Mac on ARM
        path: 'AudioWorks/tests/AudioWorks.Api.Tests/bin/Release/net8.0/Output/Encode/Valid/'

    - name: Test AudioWorks.Commands
      run: dotnet test AudioWorks/tests/AudioWorks.Commands.Tests/AudioWorks.Commands.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Restore coverage history
      uses: dawidd6/action-download-artifact@v6
      with:
        name: Coverage History for Mac on ARM
        path: CoverageHistory
      continue-on-error: true

    - name: Generate code coverage reports
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.4
      with:
        reports: '${{ github.workspace }}/**/coverage.cobertura.xml'
        targetdir: 'CoverageReport'
        historydir: 'CoverageHistory'
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub;'
        assemblyfilters: '-*.Tests;-*.TestUtilities'
        filefilters: '-*.g.cs'
        tag: '${{ github.run_number }}_${{ github.run_id }}'

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: Coverage Report for Mac on ARM
        path: CoverageReport

    - name: Upload coverage history
      uses: actions/upload-artifact@v4
      with:
        name: Coverage History for Mac on ARM
        path: CoverageHistory

    - name: Add comment to PR
      if: github.event_name == 'pull_request'
      run: gh pr comment $PR_NUMBER --body-file CoverageReport/SummaryGithub.md
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.number }}

    - name: Publish coverage in build summary
      run: cat CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY


  mac_intel:
    name: Mac on Intel
    runs-on: macos-13

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Build
      run: dotnet build AudioWorks/AudioWorks.sln --configuration Release

    - name: Test AudioWorks.Common
      run: dotnet test AudioWorks/tests/AudioWorks.Common.Tests/AudioWorks.Common.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Test AudioWorks.Extensibility
      run: dotnet test AudioWorks/tests/AudioWorks.Extensibility.Tests/AudioWorks.Extensibility.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Test AudioWorks.Api
      run: dotnet test AudioWorks/tests/AudioWorks.Api.Tests/AudioWorks.Api.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Upload test output
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: Test output for Mac on Intel
        path: 'AudioWorks/tests/AudioWorks.Api.Tests/bin/Release/net8.0/Output/Encode/Valid/'

    - name: Test AudioWorks.Commands
      run: dotnet test AudioWorks/tests/AudioWorks.Commands.Tests/AudioWorks.Commands.Tests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Restore coverage history
      uses: dawidd6/action-download-artifact@v6
      with:
        name: Coverage History for Mac on Intel
        path: CoverageHistory
      continue-on-error: true

    - name: Generate code coverage reports
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.4
      with:
        reports: '${{ github.workspace }}/**/coverage.cobertura.xml'
        targetdir: 'CoverageReport'
        historydir: 'CoverageHistory'
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub;'
        assemblyfilters: '-*.Tests;-*.TestUtilities'
        filefilters: '-*.g.cs'
        tag: '${{ github.run_number }}_${{ github.run_id }}'

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: Coverage Report for Mac on Intel
        path: CoverageReport

    - name: Upload coverage history
      uses: actions/upload-artifact@v4
      with:
        name: Coverage History for Mac on Intel
        path: CoverageHistory
  
    - name: Add comment to PR
      if: github.event_name == 'pull_request'
      run: gh pr comment $PR_NUMBER --body-file CoverageReport/SummaryGithub.md
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.number }}

    - name: Publish coverage in build summary
      run: cat CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [ windows, ubuntu_2404, ubuntu_2204, mac_arm, mac_intel ]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: Build artifacts
          path: artifacts

      - name: Publish NuGet packages
        env:
            APIKEY: ${{ secrets.NUGET_APIKEY }}
        run: |
          foreach ($file in (Get-ChildItem -Path artifacts -Filter *.*nupkg)) {
              dotnet nuget push $file --api-key $env:APIKEY --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
        shell: pwsh

      - name: Publish PowerShell module
        env:
          APIKEY: ${{ secrets.PSGALLERY_APIKEY }}
        run: Publish-Module -Path artifacts/AudioWorks.Commands -NuGetApiKey $env:APIKEY
        shell: pwsh