trigger:
  branches:
    include:
    - master
    - dev
  paths:
    exclude:
    - .gitignore.txt
    - README.md
    - LICENSE
    - azure-pipelines-linux.yml
    - azure-pipelines-macos.yml

pr:
    - dev

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  disable.coverage.autogenerate: 'true'

steps:
- task: UseDotNet@2
  inputs:
    packageType: sdk
    version: 5.0.x
    performMultiLevelLookup: true
  displayName: 'Use .NET 5.0 SDK'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: 'AudioWorks\AudioWorks.sln'
    arguments: '--configuration $(buildConfiguration)'
  displayName: 'Build $(buildConfiguration) configuration'

- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPack: '**\Extensions\**\*.csproj'
    packDirectory: '$(Build.ArtifactStagingDirectory)\prereleases\extensions'
    configurationToPack: $(buildConfiguration)
    nobuild: 'true'
    buildProperties: 'VersionSuffix="pre.$(Build.BuildId)"'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  displayName: 'Package extensions'

- powershell: |
    $ProgressPreference = 'SilentlyContinue'
    Invoke-WebRequest -Uri https://audioworks.blob.core.windows.net/prerequisites/AppleApplicationSupport.msi -OutFile AppleApplicationSupport.msi
    Invoke-WebRequest -Uri https://audioworks.blob.core.windows.net/prerequisites/AppleApplicationSupport64.msi -OutFile AppleApplicationSupport64.msi
  displayName: 'Download prerequisites'

- script: |
    COPY /Y nuget.exe %USERPROFILE%
    msiexec /i AppleApplicationSupport.msi /qb-
    msiexec /i AppleApplicationSupport64.msi /qb-
  displayName: 'Install prerequisites'

- powershell: Write-Host echo "##vso[task.setvariable variable=localAppDataDir]$([System.Environment]::GetFolderPath(28))\AudioWorks"
  displayName: Set local application data directory

- powershell: |
    $localFeedDir = "$env:LOCALAPPDATADIR\LocalFeed"
    $roamingAppDir = "$([System.Environment]::GetFolderPath(26))\AudioWorks"
    New-Item $roamingAppDir -ItemType Directory
    $content = Get-Content AudioWorks\src\AudioWorks.Common\settings.json | ConvertFrom-Json
    $content.ExtensionRepository = $localFeedDir
    $content.AutomaticExtensionDownloads = $false
    $content.UsePreReleaseExtensions = $true
    $content | ConvertTo-Json | Set-Content "$roamingAppDir\settings.json"
    dotnet test AudioWorks\tests\AudioWorks.Api.Tests --configuration $env:BUILDCONFIGURATION --filter "FullyQualifiedName=AudioWorks.Api.Tests.ExtensionInstallerTests.InstallAsyncInstallsExtensions" --no-build --results-directory $env:AGENT_TEMPDIRECTORY --collect:"XPlat Code Coverage" --settings "$env:BUILD_SOURCESDIRECTORY\install.runsettings"
    Write-Host
    Write-Host "Installed files:"
    Get-ChildItem -File -Recurse $env:LOCALAPPDATADIR\Extensions | Select-Object -ExpandProperty FullName
  displayName: 'Install extensions'

- powershell: |
    function Copy-Symbols {
        param ($source, $destination)

        $extensionDirs = Get-ChildItem -Path $env:LOCALAPPDATADIR\Extensions\$destination\*
        foreach ($pdb in Get-ChildItem -Path AudioWorks\src\Extensions\*\bin\$env:BUILDCONFIGURATION\$source\* -Filter AudioWorks.Extensions.*.pdb) {
            $extensionDir = $extensionDirs | Where-Object -Property Name -Like "$($pdb.Name -replace ".pdb").*"
            Copy-Item -Path $pdb.FullName -Destination $extensionDir -PassThru | % { Write-Host $_.FullName }
        }
    }

    Write-Host "Copied symbols:"
    Copy-Symbols "netstandard2.0" "net48"
    Copy-Symbols "netstandard2.0" "netcoreapp2.1"
    Copy-Symbols "netstandard2.1" "netcoreapp3.1"
    Copy-Symbols "netstandard2.1" "net5.0"
  displayName: 'Copy symbols to extension directories'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\tests\AudioWorks.Common.Tests\AudioWorks.Common.Tests.csproj'
    publishTestResults: 'true'
    testRunTitle: 'AudioWorks.Common on .NET 5.0'
    arguments: '--framework net5.0 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude=[AudioWorks.*.Tests]*,[AudioWorks.TestUtilities]* DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeDirectory=$(localAppDataDir)\Extensions\net5.0\*'
  displayName: 'Test AudioWorks.Common on .NET 5.0'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\tests\AudioWorks.Common.Tests\AudioWorks.Common.Tests.csproj'
    publishTestResults: 'true'
    testRunTitle: 'AudioWorks.Common on .NET Core 3.1'
    arguments: '--framework netcoreapp3.1 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude=[AudioWorks.*.Tests]*,[AudioWorks.TestUtilities]* DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeDirectory=$(localAppDataDir)\Extensions\netcoreapp3.1\*'
  displayName: 'Test AudioWorks.Common on .NET Core 3.1'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\tests\AudioWorks.Common.Tests\AudioWorks.Common.Tests.csproj'
    publishTestResults: 'true'
    testRunTitle: 'AudioWorks.Common on .NET Core 2.1'
    arguments: '--framework netcoreapp2.1 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude=[AudioWorks.*.Tests]*,[AudioWorks.TestUtilities]* DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeDirectory=$(localAppDataDir)\Extensions\netcoreapp2.1\*'
  displayName: 'Test AudioWorks.Common on .NET Core 2.1'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\tests\AudioWorks.Common.Tests\AudioWorks.Common.Tests.csproj'
    publishTestResults: 'true'
    testRunTitle: 'AudioWorks.Common on .NET Framework 4.8'
    arguments: '--framework net462 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude=[AudioWorks.*.Tests]*,[AudioWorks.TestUtilities]* DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeDirectory=$(localAppDataDir)\Extensions\net48\*'
  displayName: 'Test AudioWorks.Common on .NET Framework 4.8'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\tests\AudioWorks.Extensibility.Tests\AudioWorks.Extensibility.Tests.csproj'
    publishTestResults: 'true'
    testRunTitle: 'AudioWorks.Extensibility on .NET 5.0'
    arguments: '--framework net5.0 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude=[AudioWorks.*.Tests]*,[AudioWorks.TestUtilities]* DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeDirectory=$(localAppDataDir)\Extensions\net5.0\*'
  displayName: 'Test AudioWorks.Extensibility on .NET 5.0'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\tests\AudioWorks.Extensibility.Tests\AudioWorks.Extensibility.Tests.csproj'
    publishTestResults: 'true'
    testRunTitle: 'AudioWorks.Extensibility on .NET Core 3.1'
    arguments: '--framework netcoreapp3.1 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude=[AudioWorks.*.Tests]*,[AudioWorks.TestUtilities]* DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeDirectory=$(localAppDataDir)\Extensions\netcoreapp3.1\*'
  displayName: 'Test AudioWorks.Extensibility on .NET Core 3.1'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\tests\AudioWorks.Extensibility.Tests\AudioWorks.Extensibility.Tests.csproj'
    publishTestResults: 'true'
    testRunTitle: 'AudioWorks.Extensibility on .NET Core 2.1'
    arguments: '--framework netcoreapp2.1 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude=[AudioWorks.*.Tests]*,[AudioWorks.TestUtilities]* DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeDirectory=$(localAppDataDir)\Extensions\netcoreapp2.1\*'
  displayName: 'Test AudioWorks.Extensibility on .NET Core 2.1'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\tests\AudioWorks.Extensibility.Tests\AudioWorks.Extensibility.Tests.csproj'
    publishTestResults: 'true'
    testRunTitle: 'AudioWorks.Extensibility on .NET Framework 4.8'
    arguments: '--framework net462 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude=[AudioWorks.*.Tests]*,[AudioWorks.TestUtilities]* DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeDirectory=$(localAppDataDir)\Extensions\net48\*'
  displayName: 'Test AudioWorks.Extensibility on .NET Framework 4.8'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\tests\AudioWorks.Api.Tests\AudioWorks.Api.Tests.csproj'
    publishTestResults: 'true'
    testRunTitle: 'AudioWorks.Api on .NET 5.0'
    arguments: '--framework net5.0 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude=[AudioWorks.*.Tests]*,[AudioWorks.TestUtilities]* DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeDirectory=$(localAppDataDir)\Extensions\net5.0\*'
  displayName: 'Test AudioWorks.Api on .NET 5.0'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\tests\AudioWorks.Api.Tests\AudioWorks.Api.Tests.csproj'
    publishTestResults: 'true'
    testRunTitle: 'AudioWorks.Api on .NET Core 3.1'
    arguments: '--framework netcoreapp3.1 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude=[AudioWorks.*.Tests]*,[AudioWorks.TestUtilities]* DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeDirectory=$(localAppDataDir)\Extensions\netcoreapp3.1\*'
  displayName: 'Test AudioWorks.Api on .NET Core 3.1'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\tests\AudioWorks.Api.Tests\AudioWorks.Api.Tests.csproj'
    publishTestResults: 'true'
    testRunTitle: 'AudioWorks.Api on .NET Core 2.1'
    arguments: '--framework netcoreapp2.1 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude=[AudioWorks.*.Tests]*,[AudioWorks.TestUtilities]* DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeDirectory=$(localAppDataDir)\Extensions\netcoreapp2.1\*'
  displayName: 'Test AudioWorks.Api on .NET Core 2.1'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\tests\AudioWorks.Api.Tests\AudioWorks.Api.Tests.csproj'
    publishTestResults: 'true'
    testRunTitle: 'AudioWorks.Api on .NET Framework 4.8'
    arguments: '--framework net462 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude=[AudioWorks.*.Tests]*,[AudioWorks.TestUtilities]* DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeDirectory=$(localAppDataDir)\Extensions\net48\*'
  displayName: 'Test AudioWorks.Api on .NET Framework 4.8'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\tests\AudioWorks.Commands.Tests\AudioWorks.Commands.Tests.csproj'
    publishTestResults: 'true'
    testRunTitle: 'AudioWorks.Commands on .NET 5.0'
    arguments: '--framework net5.0 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude=[AudioWorks.*.Tests]*,[AudioWorks.TestUtilities]* DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeDirectory=$(Build.SourcesDirectory)\AudioWorks\tests\AudioWorks.Commands.Tests\bin\$(buildConfiguration)\net5.0\AudioWorks.Commands\netcoreapp3.1,$(localAppDataDir)\Extensions\net5.0\*'
  displayName: 'Test AudioWorks.Commands on .NET 5.0'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\tests\AudioWorks.Commands.Tests\AudioWorks.Commands.Tests.csproj'
    publishTestResults: 'true'
    testRunTitle: 'AudioWorks.Commands on .NET Core 3.1'
    arguments: '--framework netcoreapp3.1 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude=[AudioWorks.*.Tests]*,[AudioWorks.TestUtilities]* DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeDirectory=$(Build.SourcesDirectory)\AudioWorks\tests\AudioWorks.Commands.Tests\bin\$(buildConfiguration)\netcoreapp3.1\AudioWorks.Commands\netcoreapp3.1,$(localAppDataDir)\Extensions\netcoreapp3.1\*'
  displayName: 'Test AudioWorks.Commands on .NET Core 3.1'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\tests\AudioWorks.Commands.Tests\AudioWorks.Commands.Tests.csproj'
    publishTestResults: 'true'
    testRunTitle: 'AudioWorks.Commands on .NET Framework 4.8'
    arguments: '--framework net462 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude=[AudioWorks.*.Tests]*,[AudioWorks.TestUtilities]* DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeDirectory=$(Build.SourcesDirectory)\AudioWorks\tests\AudioWorks.Commands.Tests\bin\$(buildConfiguration)\net462\AudioWorks.Commands\net462,$(localAppDataDir)\Extensions\net48\*'
  displayName: 'Test AudioWorks.Commands on .NET Framework 4.8'

- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  inputs:
    reports: '$(Agent.TempDirectory)\*\coverage.cobertura.xml'
    targetdir: 'reports\coverage'
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura'
  displayName: 'Generate code coverage results'

- task: PublishCodeCoverageResults@1
  inputs:
    codecoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)\reports\coverage\Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)\reports\coverage'
  displayName: 'Publish code coverage results'

- task: CopyFiles@2
  inputs:
    contents: |
      AudioWorks\src\*\bin\$(buildConfiguration)\*.nupkg
      AudioWorks\src\*\bin\$(buildConfiguration)\*.snupkg
    targetFolder: '$(Build.ArtifactStagingDirectory)\releases\core'
    flattenFolders: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Copy core libraries to artifacts directory'

- task: CopyFiles@2
  inputs:
    contents: |
      AudioWorks\src\Extensions\**\*.nupkg
      AudioWorks\src\Extensions\**\*.snupkg
    targetFolder: '$(Build.ArtifactStagingDirectory)\releases\extensions'
    flattenFolders: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Copy extensions to artifacts directory'

- task: CopyFiles@2
  inputs:
    contents: 'AudioWorks\src\AudioWorks.Commands\bin\$(buildConfiguration)\AudioWorks.Commands\**'
    targetFolder: '$(Build.ArtifactStagingDirectory)\releases\module'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Copy PowerShell module to artifacts directory'

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'